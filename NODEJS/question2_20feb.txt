// Q2. Explain the node js architecture with the internal work of event loop

The event loop is what allows Node. js to perform non-blocking 
I/O operations — despite the fact that JavaScript is single-threaded 
— by offloading operations to the system kernel whenever possible. 
Since most modern kernels are multi-threaded, they can handle 
multiple operations executing in the background.
Each phase has a FIFO queue of callbacks to execute. 
While each phase is special in its own way, generally, 
when the event loop enters a given phase, it will perform 
any operations specific to that phase, then execute callbacks 
in that phase's queue until the queue has been exhausted or the 
maximum number of callbacks has executed. When the queue has been 
exhausted or the callback limit is reached, the event loop will move 
to the next phase, and so on.
Phases Overview
timers: this phase executes callbacks scheduled by setTimeout() and setInterval().
pending callbacks: executes I/O callbacks deferred to the next loop iteration.
idle, prepare: only used internally.
poll: retrieve new I/O events; execute I/O related callbacks (almost all with the 
exception of close callbacks, the ones scheduled by timers, and setImmediate()); 
node will block here when appropriate.
check: setImmediate() callbacks are invoked here.
close callbacks: some close callbacks, e.g. socket.on('close', ...).
Between each run of the event loop, Node.js checks if it is waiting for any 
asynchronous I/O or timers and shuts down cleanly if there are not any.